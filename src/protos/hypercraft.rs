// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hypercraft.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct ControlMessage {
    // message fields
    pub beacon: ::protobuf::SingularPtrField<Beacon>,
    pub ping: ::protobuf::SingularPtrField<Ping>,
    pub leave: ::protobuf::SingularPtrField<Leave>,
    pub kill: ::protobuf::SingularPtrField<Kill>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ControlMessage {
    fn default() -> &'a ControlMessage {
        <ControlMessage as ::protobuf::Message>::default_instance()
    }
}

impl ControlMessage {
    pub fn new() -> ControlMessage {
        ::std::default::Default::default()
    }

    // .Beacon beacon = 1;


    pub fn get_beacon(&self) -> &Beacon {
        self.beacon.as_ref().unwrap_or_else(|| <Beacon as ::protobuf::Message>::default_instance())
    }
    pub fn clear_beacon(&mut self) {
        self.beacon.clear();
    }

    pub fn has_beacon(&self) -> bool {
        self.beacon.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon(&mut self, v: Beacon) {
        self.beacon = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_beacon(&mut self) -> &mut Beacon {
        if self.beacon.is_none() {
            self.beacon.set_default();
        }
        self.beacon.as_mut().unwrap()
    }

    // Take field
    pub fn take_beacon(&mut self) -> Beacon {
        self.beacon.take().unwrap_or_else(|| Beacon::new())
    }

    // .Ping ping = 2;


    pub fn get_ping(&self) -> &Ping {
        self.ping.as_ref().unwrap_or_else(|| <Ping as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ping(&mut self) {
        self.ping.clear();
    }

    pub fn has_ping(&self) -> bool {
        self.ping.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping(&mut self, v: Ping) {
        self.ping = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ping(&mut self) -> &mut Ping {
        if self.ping.is_none() {
            self.ping.set_default();
        }
        self.ping.as_mut().unwrap()
    }

    // Take field
    pub fn take_ping(&mut self) -> Ping {
        self.ping.take().unwrap_or_else(|| Ping::new())
    }

    // .Leave leave = 3;


    pub fn get_leave(&self) -> &Leave {
        self.leave.as_ref().unwrap_or_else(|| <Leave as ::protobuf::Message>::default_instance())
    }
    pub fn clear_leave(&mut self) {
        self.leave.clear();
    }

    pub fn has_leave(&self) -> bool {
        self.leave.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leave(&mut self, v: Leave) {
        self.leave = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leave(&mut self) -> &mut Leave {
        if self.leave.is_none() {
            self.leave.set_default();
        }
        self.leave.as_mut().unwrap()
    }

    // Take field
    pub fn take_leave(&mut self) -> Leave {
        self.leave.take().unwrap_or_else(|| Leave::new())
    }

    // .Kill kill = 4;


    pub fn get_kill(&self) -> &Kill {
        self.kill.as_ref().unwrap_or_else(|| <Kill as ::protobuf::Message>::default_instance())
    }
    pub fn clear_kill(&mut self) {
        self.kill.clear();
    }

    pub fn has_kill(&self) -> bool {
        self.kill.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kill(&mut self, v: Kill) {
        self.kill = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kill(&mut self) -> &mut Kill {
        if self.kill.is_none() {
            self.kill.set_default();
        }
        self.kill.as_mut().unwrap()
    }

    // Take field
    pub fn take_kill(&mut self) -> Kill {
        self.kill.take().unwrap_or_else(|| Kill::new())
    }
}

impl ::protobuf::Message for ControlMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.beacon {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ping {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.leave {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.kill {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.beacon)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ping)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.leave)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.kill)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.beacon.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ping.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.leave.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.kill.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.beacon.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ping.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.leave.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.kill.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ControlMessage {
        ControlMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Beacon>>(
                "beacon",
                |m: &ControlMessage| { &m.beacon },
                |m: &mut ControlMessage| { &mut m.beacon },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Ping>>(
                "ping",
                |m: &ControlMessage| { &m.ping },
                |m: &mut ControlMessage| { &mut m.ping },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Leave>>(
                "leave",
                |m: &ControlMessage| { &m.leave },
                |m: &mut ControlMessage| { &mut m.leave },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Kill>>(
                "kill",
                |m: &ControlMessage| { &m.kill },
                |m: &mut ControlMessage| { &mut m.kill },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ControlMessage>(
                "ControlMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ControlMessage {
        static instance: ::protobuf::rt::LazyV2<ControlMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ControlMessage::new)
    }
}

impl ::protobuf::Clear for ControlMessage {
    fn clear(&mut self) {
        self.beacon.clear();
        self.ping.clear();
        self.leave.clear();
        self.kill.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ControlMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ControlMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PhysicalAddress {
    // message fields
    pub ip: ::std::string::String,
    pub port: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PhysicalAddress {
    fn default() -> &'a PhysicalAddress {
        <PhysicalAddress as ::protobuf::Message>::default_instance()
    }
}

impl PhysicalAddress {
    pub fn new() -> PhysicalAddress {
        ::std::default::Default::default()
    }

    // string ip = 1;


    pub fn get_ip(&self) -> &str {
        &self.ip
    }
    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: ::std::string::String) {
        self.ip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut ::std::string::String {
        &mut self.ip
    }

    // Take field
    pub fn take_ip(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ip, ::std::string::String::new())
    }

    // int32 port = 2;


    pub fn get_port(&self) -> i32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = v;
    }
}

impl ::protobuf::Message for PhysicalAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ip)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ip.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ip);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.ip.is_empty() {
            os.write_string(1, &self.ip)?;
        }
        if self.port != 0 {
            os.write_int32(2, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PhysicalAddress {
        PhysicalAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ip",
                |m: &PhysicalAddress| { &m.ip },
                |m: &mut PhysicalAddress| { &mut m.ip },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "port",
                |m: &PhysicalAddress| { &m.port },
                |m: &mut PhysicalAddress| { &mut m.port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PhysicalAddress>(
                "PhysicalAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PhysicalAddress {
        static instance: ::protobuf::rt::LazyV2<PhysicalAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PhysicalAddress::new)
    }
}

impl ::protobuf::Clear for PhysicalAddress {
    fn clear(&mut self) {
        self.ip.clear();
        self.port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PhysicalAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PhysicalAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddressPair {
    // message fields
    pub physical_address: ::protobuf::SingularPtrField<PhysicalAddress>,
    pub logical_address: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddressPair {
    fn default() -> &'a AddressPair {
        <AddressPair as ::protobuf::Message>::default_instance()
    }
}

impl AddressPair {
    pub fn new() -> AddressPair {
        ::std::default::Default::default()
    }

    // .PhysicalAddress physical_address = 1;


    pub fn get_physical_address(&self) -> &PhysicalAddress {
        self.physical_address.as_ref().unwrap_or_else(|| <PhysicalAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_physical_address(&mut self) {
        self.physical_address.clear();
    }

    pub fn has_physical_address(&self) -> bool {
        self.physical_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_physical_address(&mut self, v: PhysicalAddress) {
        self.physical_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_physical_address(&mut self) -> &mut PhysicalAddress {
        if self.physical_address.is_none() {
            self.physical_address.set_default();
        }
        self.physical_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_physical_address(&mut self) -> PhysicalAddress {
        self.physical_address.take().unwrap_or_else(|| PhysicalAddress::new())
    }

    // uint32 logical_address = 2;


    pub fn get_logical_address(&self) -> u32 {
        self.logical_address
    }
    pub fn clear_logical_address(&mut self) {
        self.logical_address = 0;
    }

    // Param is passed by value, moved
    pub fn set_logical_address(&mut self, v: u32) {
        self.logical_address = v;
    }
}

impl ::protobuf::Message for AddressPair {
    fn is_initialized(&self) -> bool {
        for v in &self.physical_address {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.physical_address)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.logical_address = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.physical_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.logical_address != 0 {
            my_size += ::protobuf::rt::value_size(2, self.logical_address, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.physical_address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.logical_address != 0 {
            os.write_uint32(2, self.logical_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddressPair {
        AddressPair::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PhysicalAddress>>(
                "physical_address",
                |m: &AddressPair| { &m.physical_address },
                |m: &mut AddressPair| { &mut m.physical_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "logical_address",
                |m: &AddressPair| { &m.logical_address },
                |m: &mut AddressPair| { &mut m.logical_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddressPair>(
                "AddressPair",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddressPair {
        static instance: ::protobuf::rt::LazyV2<AddressPair> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddressPair::new)
    }
}

impl ::protobuf::Clear for AddressPair {
    fn clear(&mut self) {
        self.physical_address.clear();
        self.logical_address = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddressPair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddressPair {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Beacon {
    // message fields
    pub address: ::protobuf::SingularPtrField<AddressPair>,
    pub seq_no: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Beacon {
    fn default() -> &'a Beacon {
        <Beacon as ::protobuf::Message>::default_instance()
    }
}

impl Beacon {
    pub fn new() -> Beacon {
        ::std::default::Default::default()
    }

    // .AddressPair address = 1;


    pub fn get_address(&self) -> &AddressPair {
        self.address.as_ref().unwrap_or_else(|| <AddressPair as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: AddressPair) {
        self.address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut AddressPair {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> AddressPair {
        self.address.take().unwrap_or_else(|| AddressPair::new())
    }

    // uint64 seq_no = 2;


    pub fn get_seq_no(&self) -> u64 {
        self.seq_no
    }
    pub fn clear_seq_no(&mut self) {
        self.seq_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq_no(&mut self, v: u64) {
        self.seq_no = v;
    }
}

impl ::protobuf::Message for Beacon {
    fn is_initialized(&self) -> bool {
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq_no = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.seq_no != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seq_no, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.seq_no != 0 {
            os.write_uint64(2, self.seq_no)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Beacon {
        Beacon::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AddressPair>>(
                "address",
                |m: &Beacon| { &m.address },
                |m: &mut Beacon| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "seq_no",
                |m: &Beacon| { &m.seq_no },
                |m: &mut Beacon| { &mut m.seq_no },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Beacon>(
                "Beacon",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Beacon {
        static instance: ::protobuf::rt::LazyV2<Beacon> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Beacon::new)
    }
}

impl ::protobuf::Clear for Beacon {
    fn clear(&mut self) {
        self.address.clear();
        self.seq_no = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Beacon {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Beacon {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ping {
    // message fields
    pub sender: ::protobuf::SingularPtrField<PhysicalAddress>,
    pub receiver: ::protobuf::SingularPtrField<PhysicalAddress>,
    pub hroot: ::protobuf::SingularPtrField<PhysicalAddress>,
    pub seq_no: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ping {
    fn default() -> &'a Ping {
        <Ping as ::protobuf::Message>::default_instance()
    }
}

impl Ping {
    pub fn new() -> Ping {
        ::std::default::Default::default()
    }

    // .PhysicalAddress sender = 1;


    pub fn get_sender(&self) -> &PhysicalAddress {
        self.sender.as_ref().unwrap_or_else(|| <PhysicalAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    pub fn has_sender(&self) -> bool {
        self.sender.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: PhysicalAddress) {
        self.sender = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut PhysicalAddress {
        if self.sender.is_none() {
            self.sender.set_default();
        }
        self.sender.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender(&mut self) -> PhysicalAddress {
        self.sender.take().unwrap_or_else(|| PhysicalAddress::new())
    }

    // .PhysicalAddress receiver = 2;


    pub fn get_receiver(&self) -> &PhysicalAddress {
        self.receiver.as_ref().unwrap_or_else(|| <PhysicalAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_receiver(&mut self) {
        self.receiver.clear();
    }

    pub fn has_receiver(&self) -> bool {
        self.receiver.is_some()
    }

    // Param is passed by value, moved
    pub fn set_receiver(&mut self, v: PhysicalAddress) {
        self.receiver = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiver(&mut self) -> &mut PhysicalAddress {
        if self.receiver.is_none() {
            self.receiver.set_default();
        }
        self.receiver.as_mut().unwrap()
    }

    // Take field
    pub fn take_receiver(&mut self) -> PhysicalAddress {
        self.receiver.take().unwrap_or_else(|| PhysicalAddress::new())
    }

    // .PhysicalAddress hroot = 3;


    pub fn get_hroot(&self) -> &PhysicalAddress {
        self.hroot.as_ref().unwrap_or_else(|| <PhysicalAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_hroot(&mut self) {
        self.hroot.clear();
    }

    pub fn has_hroot(&self) -> bool {
        self.hroot.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hroot(&mut self, v: PhysicalAddress) {
        self.hroot = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hroot(&mut self) -> &mut PhysicalAddress {
        if self.hroot.is_none() {
            self.hroot.set_default();
        }
        self.hroot.as_mut().unwrap()
    }

    // Take field
    pub fn take_hroot(&mut self) -> PhysicalAddress {
        self.hroot.take().unwrap_or_else(|| PhysicalAddress::new())
    }

    // uint64 seq_no = 4;


    pub fn get_seq_no(&self) -> u64 {
        self.seq_no
    }
    pub fn clear_seq_no(&mut self) {
        self.seq_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq_no(&mut self, v: u64) {
        self.seq_no = v;
    }
}

impl ::protobuf::Message for Ping {
    fn is_initialized(&self) -> bool {
        for v in &self.sender {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.receiver {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.hroot {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.receiver)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.hroot)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq_no = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.sender.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.receiver.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.hroot.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.seq_no != 0 {
            my_size += ::protobuf::rt::value_size(4, self.seq_no, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.sender.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.receiver.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.hroot.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.seq_no != 0 {
            os.write_uint64(4, self.seq_no)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ping {
        Ping::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PhysicalAddress>>(
                "sender",
                |m: &Ping| { &m.sender },
                |m: &mut Ping| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PhysicalAddress>>(
                "receiver",
                |m: &Ping| { &m.receiver },
                |m: &mut Ping| { &mut m.receiver },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PhysicalAddress>>(
                "hroot",
                |m: &Ping| { &m.hroot },
                |m: &mut Ping| { &mut m.hroot },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "seq_no",
                |m: &Ping| { &m.seq_no },
                |m: &mut Ping| { &mut m.seq_no },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Ping>(
                "Ping",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Ping {
        static instance: ::protobuf::rt::LazyV2<Ping> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Ping::new)
    }
}

impl ::protobuf::Clear for Ping {
    fn clear(&mut self) {
        self.sender.clear();
        self.receiver.clear();
        self.hroot.clear();
        self.seq_no = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ping {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Leave {
    // message fields
    pub leaver: ::protobuf::SingularPtrField<PhysicalAddress>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Leave {
    fn default() -> &'a Leave {
        <Leave as ::protobuf::Message>::default_instance()
    }
}

impl Leave {
    pub fn new() -> Leave {
        ::std::default::Default::default()
    }

    // .PhysicalAddress leaver = 1;


    pub fn get_leaver(&self) -> &PhysicalAddress {
        self.leaver.as_ref().unwrap_or_else(|| <PhysicalAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_leaver(&mut self) {
        self.leaver.clear();
    }

    pub fn has_leaver(&self) -> bool {
        self.leaver.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leaver(&mut self, v: PhysicalAddress) {
        self.leaver = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leaver(&mut self) -> &mut PhysicalAddress {
        if self.leaver.is_none() {
            self.leaver.set_default();
        }
        self.leaver.as_mut().unwrap()
    }

    // Take field
    pub fn take_leaver(&mut self) -> PhysicalAddress {
        self.leaver.take().unwrap_or_else(|| PhysicalAddress::new())
    }
}

impl ::protobuf::Message for Leave {
    fn is_initialized(&self) -> bool {
        for v in &self.leaver {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.leaver)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.leaver.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.leaver.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Leave {
        Leave::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PhysicalAddress>>(
                "leaver",
                |m: &Leave| { &m.leaver },
                |m: &mut Leave| { &mut m.leaver },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Leave>(
                "Leave",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Leave {
        static instance: ::protobuf::rt::LazyV2<Leave> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Leave::new)
    }
}

impl ::protobuf::Clear for Leave {
    fn clear(&mut self) {
        self.leaver.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Leave {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Leave {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Kill {
    // message fields
    pub killed: ::protobuf::SingularPtrField<PhysicalAddress>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Kill {
    fn default() -> &'a Kill {
        <Kill as ::protobuf::Message>::default_instance()
    }
}

impl Kill {
    pub fn new() -> Kill {
        ::std::default::Default::default()
    }

    // .PhysicalAddress killed = 1;


    pub fn get_killed(&self) -> &PhysicalAddress {
        self.killed.as_ref().unwrap_or_else(|| <PhysicalAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_killed(&mut self) {
        self.killed.clear();
    }

    pub fn has_killed(&self) -> bool {
        self.killed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_killed(&mut self, v: PhysicalAddress) {
        self.killed = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_killed(&mut self) -> &mut PhysicalAddress {
        if self.killed.is_none() {
            self.killed.set_default();
        }
        self.killed.as_mut().unwrap()
    }

    // Take field
    pub fn take_killed(&mut self) -> PhysicalAddress {
        self.killed.take().unwrap_or_else(|| PhysicalAddress::new())
    }
}

impl ::protobuf::Message for Kill {
    fn is_initialized(&self) -> bool {
        for v in &self.killed {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.killed)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.killed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.killed.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Kill {
        Kill::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PhysicalAddress>>(
                "killed",
                |m: &Kill| { &m.killed },
                |m: &mut Kill| { &mut m.killed },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Kill>(
                "Kill",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Kill {
        static instance: ::protobuf::rt::LazyV2<Kill> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Kill::new)
    }
}

impl ::protobuf::Clear for Kill {
    fn clear(&mut self) {
        self.killed.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Kill {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Kill {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10hypercraft.proto\"\x85\x01\n\x0eControlMessage\x12\x1f\n\x06beacon\
    \x18\x01\x20\x01(\x0b2\x07.BeaconR\x06beacon\x12\x19\n\x04ping\x18\x02\
    \x20\x01(\x0b2\x05.PingR\x04ping\x12\x1c\n\x05leave\x18\x03\x20\x01(\x0b\
    2\x06.LeaveR\x05leave\x12\x19\n\x04kill\x18\x04\x20\x01(\x0b2\x05.KillR\
    \x04kill\"5\n\x0fPhysicalAddress\x12\x0e\n\x02ip\x18\x01\x20\x01(\tR\x02\
    ip\x12\x12\n\x04port\x18\x02\x20\x01(\x05R\x04port\"s\n\x0bAddressPair\
    \x12;\n\x10physical_address\x18\x01\x20\x01(\x0b2\x10.PhysicalAddressR\
    \x0fphysicalAddress\x12'\n\x0flogical_address\x18\x02\x20\x01(\rR\x0elog\
    icalAddress\"G\n\x06Beacon\x12&\n\x07address\x18\x01\x20\x01(\x0b2\x0c.A\
    ddressPairR\x07address\x12\x15\n\x06seq_no\x18\x02\x20\x01(\x04R\x05seqN\
    o\"\x9d\x01\n\x04Ping\x12(\n\x06sender\x18\x01\x20\x01(\x0b2\x10.Physica\
    lAddressR\x06sender\x12,\n\x08receiver\x18\x02\x20\x01(\x0b2\x10.Physica\
    lAddressR\x08receiver\x12&\n\x05hroot\x18\x03\x20\x01(\x0b2\x10.Physical\
    AddressR\x05hroot\x12\x15\n\x06seq_no\x18\x04\x20\x01(\x04R\x05seqNo\"1\
    \n\x05Leave\x12(\n\x06leaver\x18\x01\x20\x01(\x0b2\x10.PhysicalAddressR\
    \x06leaver\"0\n\x04Kill\x12(\n\x06killed\x18\x01\x20\x01(\x0b2\x10.Physi\
    calAddressR\x06killedb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
